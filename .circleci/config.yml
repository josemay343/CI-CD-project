version: 2.1

orbs:
  slack: circleci/slack@4.4.2

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            # aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    # parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7} " --request GET https://api.memstash.io/values/migrations_data)
            if(( ${SUCCESS}==1 )); 
            then
              cd backend
              npm install
            #  Add revert code here. You can find this in the Getting Started section.
              npm run migrations:revert
            fi

  slack-notify-failure:
    steps:
      - slack/notify:
          channel: devops
          event: fail
          template: basic_fail_1
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
            npm install oauth-sign
      - run:
          name: Build front-end
          command: |
            cd frontend
            # sudo npm update
            # sudo npm install npm@latest -g
            # sudo npm install webpack
            # sudo npm install oauth-sign
            # sudo npm install --save-dev jest
            npm run build
      - save_cache:
          paths:
            - frontend/node_modules
            # - frontend/dist
          key: frontend-build

      - slack-notify-failure

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             #  sudo rm -rf node_modules/
             npm install
             #sudo npm i --save-dev standard-version
             #sudo npm install --save-dev jest
             npm run build

      - slack-notify-failure
      - save_cache:
          paths: 
            - backend/node_modules
            # - backend/dist
          key: backend-build


  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: 
            - frontend-build
      # Your job code here
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
            npm install oauth-sign
      - run:
          name: test frontend
          command: |
            cd frontend
            # sudo npm i
            # sudo npm update
            # sudo npm install --save-dev jest
            sudo npm run test

      - slack-notify-failure
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - backend-build
      # Your job code here
      - run:
          name: test backend
          command: |
            cd backend
            npm install
            # sudo npm install --save-dev jest
            npm run test
      # - save_cache:
      #     paths: [backend/node_modules]
      #     key: backend-test
      - slack-notify-failure
            
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - frontend-build
      # Your job code here
      - run:
          name: scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical

      - slack-notify-failure

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - backend-build
      # Your job code here
      - run:
          name: scan backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical

      - slack-notify-failure

  # slack-notify-failure:
  #   docker:
  #     - image: 'cimg/base:stable'
  #   steps:
  #     - slack/notify:
  #         channel: devops
  #         event: fail
  #         template: basic_fail_1

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            BACKEND_IP=$(aws ec2 describe-instances \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)

            echo ${BACKEND_IP} >> .circleci/ansible/inventory.txt

            curl -H "Content-Type: text/plain" \
            -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
            --request PUT \
            --data "$BACKEND_IP" \
            https://api.memstash.io/values/url_backend_ip
            
      - slack-notify-failure
      
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure 
      - destroy-environment
      - revert-migrations

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.13
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ['1b:13:5b:1b:2d:fa:29:99:25:01:c6:a4:7f:6d:b1:e4']
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      # - run:
      #     name: Create Inventory file
      #     command: |
      #       BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/url_backend_ip)
      #       echo ${BACKEND_IP} >> .circleci/ansible/inventory.txt
      #       cat .circleci/ansible/inventory.txt
      - run:
          name: Configure server
          command: |
            # Your code here
            cd .circleci/ansible
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure      
      - destroy-environment
  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install awscli
          command: |
            sudo apt-get -y -qq update
            # sudo apt-get -qq install awscli
      - run:
          name: create backend .env files
          command: |
            # Your code here
            cd backend
            touch .env

            echo ENVIRONMENT=$ENVIRONMENT >> ".env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            cat .env

      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm install typescript
            # npm i -g pm2
            # npm run migrations:revert
            touch migration_data.txt
            npm run migrations >> migration_data.txt
            cat migration_data.txt
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            cd backend
            if grep -q "has been executed successfully" migration_data.txt
            then
              echo "Migrations success, updating memstash"
              curl -H "Content-Type: text/plain" \
              -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
              --request PUT \
              --data "1" \
              https://api.memstash.io/values/migrations_data
            else
              echo "Migrations failed"
              curl -H "Content-Type: text/plain" \
              -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
              --request PUT \
              --data "0" \
              https://api.memstash.io/values/migrations_data
            fi
            # RESPONSE=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/migrations_data)"
            # echo "$RESPONSE"
            echo "${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment
      - revert-migrations
            
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add curl
            apk add --update npm
            pip3 install awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            # your code here
            # BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/url_backend_ip)
            BACKEND_IP=$(aws ec2 describe-instances \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo ${API_URL} >> frontend/.env
            echo ${API_URL}
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            npm install webpack-dev-server -g
            cd frontend
            npm install
            # npm install oauth-sign
            npm run build
            aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/.env

      - destroy-environment
      - revert-migrations
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.13
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ['1b:13:5b:1b:2d:fa:29:99:25:01:c6:a4:7f:6d:b1:e4']
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add curl
            pip3 install awscli
      # - run:
      #     name: Build inventory
      #     command: |
      #       cd .circleci/ansible
      #       # BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/url_backend_ip)
      #       BACKEND_IP=$(aws ec2 describe-instances \
      #       --query "Reservations[*].Instances[*].PublicIpAddress" \
      #       --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
      #       --output text)
      #       echo ${BACKEND_IP} >> inventory.txt
      #       cat inventory.txt
      - run:
          name: Deploy backend
          command: |
            # printenv >> ./backend/.envg
            # cd backend
            # echo ENVIRONMENT=$ENVIRONMENT >> ".env"
            # echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            # echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            # echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            # echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
            # echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            # echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            # echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            # echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            # echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            # echo ${TYPEORM_DATABASE}
            # cat .env
            cd .circleci/ansible/
            ansible-playbook -i inventory.txt deploy-backend.yml
            # your code here

      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations


  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.7-alpine3.13
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update curl nodejs npm
            pip3 install awscli
      # - run:
      #     name: Get backend url
      #     command: |
      #       # your code here
      #       # BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/url_backend_ip)
      #       BACKEND_IP=$(aws ec2 describe-instances \
      #       --query "Reservations[*].Instances[*].PublicIpAddress" \
      #       --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
      #       --output text)
      #       echo ${BACKEND_IP}
      #       export API_URL="http://${BACKEND_IP}:3030/api/status"
      #       echo ${API_URL}
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            # curl ${API_URL}
            # BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/url_backend_ip)
            BACKEND_IP=$(aws ec2 describe-instances \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            echo ${BACKEND_IP}
            export API_URL="http://${BACKEND_IP}:3030/api/status"
            echo ${API_URL}
            if curl -s ${API_URL} | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 0
            fi
      # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#       - image: amazon/aws-cli
#     steps:
#       # Checkout code from git
#       - checkout
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#       - image: amazon/aws-cli
#     steps:
#       # Checkout code from git
#       - checkout
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      # - slack-notify-failure:
      #     context: slack-secrets
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]